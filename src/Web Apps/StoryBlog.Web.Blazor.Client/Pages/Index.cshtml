@page "/"

@using global::Blazor.Fluxor
@using StoryBlog.Web.Blazor.Client.Store
@using StoryBlog.Web.Blazor.Client.Store.Actions
@using StoryBlog.Web.Services.Blog.Interop.Includes

@inherits global::Blazor.Fluxor.Components.FluxorComponent

@inject IState<StoriesState> State
@inject IDispatcher Dispatcher

<div class="row">
    @if (State.Value.IsNone())
    {
        <p>None</p>
    }
    else if (State.Value.IsLoading())
    {
        <div class="container storyblog-loading">
            <div class="row h-100 align-items-center">
                <div class="col-12 justify-content-center text-center">
                    <i class="mdi mdi-loading mdi-spin mdi-48px"></i>
                </div>
            </div>
        </div>
    }
    else if (State.Value.IsFailed())
    {
        <div class="alert alert-danger">
            <h5>@State.Value.Status.Error</h5>
        </div>
    }
    else
    {
        <section class="col-8">
            @foreach (var story in State.Value.Stories)
            {
                <article id=@story.Slug class="border-bottom border-light storyblog-story mt-5">
                    <div class="storyblog-story-header mt-0 mb-1">
                        <h2 class="storyblog-story-title">
                            <a href="/Story/@story.Slug">@story.Title</a>
                        </h2>
                        <ul class="list-unstyled list-inline">
                            <li class="list-inline-item">
                                <i class="mdi mdi-calendar"></i>
                                @story.Published
                            </li>
                            <li class="list-inline-item">
                                <i class="mdi mdi-comment-multiple-outline"></i>
                                <text>@story.CommentsCount</text>&nbsp;Comments
                            </li>
                        </ul>
                    </div>
                    <div class="justify-content-md-start mb-5">@story.Content</div>
                </article>
            }
            
            @if (null != State.Value.Navigation.Next || null != State.Value.Navigation.Previous)
            {
                <nav aria-label="pages">
                    <ul class="pagination">
                        @if (null != State.Value.Navigation.Previous)
                        {
                            <li class="page-item">
                                <a class="page-link">Previous</a>
                            </li>
                        }

                        @if (null != State.Value.Navigation.Next)
                        {
                            <li class="page-item">
                                <a class="page-link">Previous</a>
                            </li>
                        }
                    </ul>
                </nav>
            }
        </section>
        <aside class="col-4">
        </aside>
    }
</div>

@functions
{

    protected override void OnInit()
    {
        base.OnInit();
        Dispatcher.Dispatch(new GetStoriesAction(StoryIncludes.Authors | StoryIncludes.Comments));
    }

}