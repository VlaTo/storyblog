@page "/Story/{Slug}"

@using global::Blazor.Fluxor
@using StoryBlog.Web.Blazor.Client.Store
@using StoryBlog.Web.Blazor.Client.Controls
@using StoryBlog.Web.Blazor.Client.Store.Actions
@using StoryBlog.Web.Services.Blog.Interop.Includes
@using StoryBlog.Web.Services.Shared.Common

@inherits global::Blazor.Fluxor.Components.FluxorComponent

@inject IState<StoryState> StoryState
@inject IState<UserState> UserState
@inject IDispatcher Dispatcher
@inject IPluralLocalizer Pluralizer

@if (null == StoryState)
{

}
else if (StoryState.Value.IsNone())
{
    <p class="text-muted">Loading...</p>
}
else
{
    <section>
        <div class="container">
            <div class="row">
                <div class="col-lg-9">
                    @if (StoryState.Value.IsLoading())
                    {
                        <p>Loading...</p>
                    }

                    @if (StoryState.Value.IsFailed())
                    {
                        <p>@StoryState.Value.Status.Error</p>
                    }
                    else
                    {
                        var model = StoryState.Value;

                        if (null != model)
                        {
                            <article id="@model.Slug" class="">
                                <div class="mb-5">
                                    <h2 class="">@model.Title</h2>
                                    <ul class="list-unstyled list-inline text-muted mt-2">
                                        <li class="list-inline-item">
                                            <i class="mdi mdi-calendar"></i>
                                            <TimeLabel DateTime="@model.Published" />
                                        </li>
                                        <li class="list-inline-item">
                                            <i class="mdi mdi-comment-multiple-outline"></i>
                                            @model.CommentsCount @Pluralizer["комментарий", model.CommentsCount]
                                        </li>
                                    </ul>

                                    <div class="justify-content-md-start my-4">@((MarkupString)model.Content)</div>

                                    @if (model.IsCommentsClosed)
                                    {
                                        <div class="alert alert-warning mt-4" role="alert">
                                            <h5>Возможность комментировать заблокирована</h5>
                                        </div>
                                    }
                                    else
                                    {

                                        @if (0 == model.Comments.Count)
                                        {
                                            <div class="alert alert-secondary mt-4" role="alert">
                                                <h5>Добавь комментарий первым</h5>
                                            </div>
                                        }

                                        <div class="mt-4">
                                            <CommentBox OnSubmitComment="OnSubmitComment" />
                                        </div>
                                    }

                                    @if (model.Comments.Any())
                                    {
                                        <div class="m-lg-2">
                                            <ul class="list-unstyled">
                                                <CommentsBlock Comments="@model.Comments" />
                                            </ul>
                                        </div>
                                    }
                                </div>
                            </article>
                        }
                    }
                </div>
                <aside class="col-lg-3">
                </aside>
            </div>
        </div>
    </section>
}

@code
{
    [Parameter]
    public string Slug
    {
        get;
        set;
    }

    protected override void OnParametersSet()
    {
        const StoryFlags includes = StoryFlags.Authors | StoryFlags.Comments;
        Dispatcher.Dispatch(new GetStoryAction(Slug, includes));
    }

    private void OnSubmitComment(string content)
    {
        Dispatcher.Dispatch(new CreatePendingCommentAction(Slug, null, content));
    }
}