@page "/Story/{Slug}"

@using StoryBlog.Web.Client.Store
@using StoryBlog.Web.Client.Store.Actions
@using StoryBlog.Web.Client.Store.Models
@using StoryBlog.Web.Client.Core
@using StoryBlog.Web.Services.Blog.Interop.Includes
@using StoryBlog.Web.Services.Shared.Common
@using StoryBlog.Web.Client.Extensions

@inherits Blazor.Fluxor.Components.FluxorComponent

@inject Blazor.Fluxor.IState<StoryState> StoryState
@inject Blazor.Fluxor.IDispatcher Dispatcher
@inject IPluralService Pluralizer
@inject IModalService ModalService

<section>
    <div class="container">
        <div class="row">
            <div class="col-lg-9">
                <ContentPresenter Source="@StoryState" TSource="StoryBlog.Web.Client.Store.StoryState">
                    <Content Context="Data">
                        <article id="@Data.Slug" class="">
                            <div class="mb-5">
                                <h2 class="">@Data.Title</h2>
                                <ul class="list-unstyled list-inline text-muted mt-2">
                                    <li class="list-inline-item">
                                        <i class="mdi mdi-calendar"></i>
                                        <TimeLabel DateTime="@Data.Published" />
                                    </li>
                                    <li class="list-inline-item">
                                        <i class="mdi mdi-comment-multiple-outline"></i>
                                        @Data.CommentsCount @Pluralizer["Comment", Data.CommentsCount]
                                    </li>
                                </ul>

                                <div class="justify-content-md-start my-4">@((MarkupString)Data.Content)</div>

                                @if (Data.IsCommentsClosed)
                                {
                                    <div class="alert alert-warning mt-4" role="alert">
                                        <h5>Возможность комментировать заблокирована</h5>
                                    </div>
                                }
                                else
                                {
                                    if (0 == Data.Comments.Count)
                                    {
                                        <div class="alert alert-secondary mt-4" role="alert">
                                            <h5>Добавь комментарий первым</h5>
                                        </div>
                                    }

                                    var comment = GetComposeComment();

                                    if (null != comment)
                                    {
                                        <div class="mt-4">
                                            <ReplyComposer OnSubmit=@(sender => OnSubmitComment(sender, comment)) />
                                        </div>
                                    }
                                    else
                                    {
                                        <ul class="list-unstyled list-inline">
                                            <li class="list-inline-item">
                                                <BootstrapButton Type=BootstrapButtonTypes.Link
                                                                 Outline=true
                                                                 Size=BootstrapButtonSizes.Small
                                                                 Class="text-muted"
                                                                 OnClick=OnComposeComment>
                                                    <i class="mdi mdi-reply"></i>&nbsp;Ответить
                                                </BootstrapButton>
                                            </li>
                                        </ul>
                                    }
                                }

                                @if (Data.Comments.Any())
                                {
                                    <div class="mt-4">
                                        <CommentsBlock Comments="@Data.Comments" Level="0" />
                                    </div>
                                }
                            </div>
                        </article>
                    </Content>
                    <NoContent>
                        <p class="text-muted">No data</p>
                    </NoContent>
                    <Failure>
                        <p class="text-muted">Failed</p>
                    </Failure>
                </ContentPresenter>
            </div>
            <aside class="col-lg-3">
            </aside>
        </div>
    </div>
</section>

@code
{
    [Parameter]
    public string Slug
    {
        get;
        set;
    }

    protected override void OnParametersSet() => 
        Dispatcher.Dispatch(new GetStoryAction(Slug, StoryFlags.Authors | StoryFlags.Comments));

    private void OnComposeComment(EventArgs e) => 
        Dispatcher.Dispatch(new ComposeReplyAction(StoryState.Value.Slug, null, Guid.NewGuid()));

    private void OnSubmitComment(object sender, ComposeComment comment) => 
        Dispatcher.Dispatch(new SaveReplyAction(comment.StorySlug, null, comment.Reference, ((ReplyComposer)sender).Message));

    private ComposeComment GetComposeComment()
    {
        if (null == StoryState.Value)
        {
            return null;
        }

        var comments = StoryState.Value.IsSuccess() ? StoryState.Value.Comments : Array.Empty<CommentBase>();

        return StoryState.Value.Comments.OfType<ComposeComment>().FirstOrDefault();
    }

    /*private async void ShowDialog(MouseEventArgs e)
    {
        var button = await ModalService.ShowAsync(new InformationContent("Sample Dialog", "Lorem Ipsum dolor sit amet", ModalButtons.OkCancel()));

        if (ModalButtons.CancelButton == button)
        {
            System.Diagnostics.Debug.WriteLine("ShowDialog cancelled");
        }
        else
        {
            System.Diagnostics.Debug.WriteLine($"ShowDialog completes: {button.Title}");
        }
    }*/
}