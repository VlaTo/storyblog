@page "/Story/{Slug}"

@using global::Blazor.Fluxor
@using StoryBlog.Web.Blazor.Client.Store
@using StoryBlog.Web.Blazor.Client.Store.Actions
@using StoryBlog.Web.Services.Blog.Interop.Includes

@inherits global::Blazor.Fluxor.Components.FluxorComponent

@inject IState<StoryState> State
@inject IDispatcher Dispatcher

@if (null == State)
{

}
else if (State.Value.Status.IsNone())
{
    <p class="text-muted">Loading...</p>
}
else
{
    <section>
        <div class="container">
            <div class="row">
                <div class="col-lg-9">
                    @if (null != State.Value.Status.Error)
                    {
                        <p>@State.Value.Status.Error</p>
                    }

                    @{
                        var model = State.Value;
                    }

                    @if (null != model)
                    {
                        <article id="@model.Slug" class="">
                            <div class="mb-5">
                                <h2 class="">@model.Title</h2>
                                <ul class="list-unstyled list-inline">
                                    <li class="list-inline-item">
                                        <i class="mdi mdi-calendar"></i>
                                        <TimeLabel DateTime=@model.Published/>
                                    </li>
                                    <li class="list-inline-item">
                                        <i class="mdi mdi-comment-multiple-outline"></i>
                                        @model.AllCommentsCount Comments
                                    </li>
                                </ul>
                                <div class="justify-content-md-start">@model.Content</div>
                            </div>

                            @if (0 == model.AllCommentsCount)
                            {
                                <div class="alert alert-secondary" role="alert">
                                    <h4>No comments yet</h4>
                                </div>
                            }
                            else
                            {
                                if (model.Closed)
                                {
                                    <div class="alert alert-warning" role="alert">
                                        <h4>Comments are closed</h4>
                                    </div>
                                }

                                <div class="m-lg-2">
                                    <ul class="list-unstyled">
                                        @foreach (var comment in model.Comments)
                                        {
                                            <StoryBlogComment Comment=@comment Level=0/>
                                        }
                                    </ul>
                                </div>
                            }
                        </article>
                    }
                </div>
                <aside class="col-lg-3">
                    <StoryBlogAboutAuthor />
                </aside>
            </div>
        </div>
    </section>
}

@functions
{
    [Parameter]
    protected string Slug { get; set; }

    protected override void OnParametersSet()
    {
        const StoryIncludes includes = StoryIncludes.Authors | StoryIncludes.Comments;
        Dispatcher.Dispatch(new GetStoryAction(Slug, includes));
    }
}