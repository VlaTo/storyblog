@page "/"

@using global::Blazor.Fluxor
@using StoryBlog.Web.Blazor.Client.Store
@using StoryBlog.Web.Blazor.Client.Store.Actions
@using StoryBlog.Web.Services.Blog.Interop.Includes
@using StoryBlog.Web.Services.Shared.Common

@inherits global::Blazor.Fluxor.Components.FluxorComponent

@inject IState<StoriesState> State
@inject IDispatcher Dispatcher
@inject IUriHelper UriHelper
@inject IPluralLocalizer Pluralizer
@inject IDateTimeLocalizer DateTimeLocalizer
@inject ITimeSpanLocalizer TimeSpanLocalizer

<div class="row">
    @if (State.Value.IsLoading())
    {
        <div class="container storyblog-loading">
            <div class="row h-100 align-items-center">
                <div class="col-12 justify-content-center text-center">
                    <div class="spinner-border text-dark storyblog-spinner" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (State.Value.IsNone())
    {
        <p>None</p>
    }
    else if (State.Value.IsFailed())
    {
        <div class="alert alert-danger">
            <h5>@State.Value.Status.Error</h5>
        </div>
    }
    else
    {
        <section class="col-8">
            @foreach (var story in State.Value.Stories)
            {
                var linkSrc = "story/" + story.Slug;

                <article @key="story" id=@story.Slug class="card storyblog-story">
                    <div class="card-header">
                        <ul class="card-subtitle text-muted list-unstyled list-inline">
                            <li class="list-inline-item">
                                <i class="mdi mdi-calendar"></i>
                                <TimeLabel DateTime=@story.Published ConvertTimeSpan=@((label, span) => OnConvertTimeSpan(span, story.Published)) />
                            </li>
                            <li class="list-inline-item">
                                <i class="mdi mdi-account-outline"></i>
                                @story.Author.Name
                            </li>
                            <li class="list-inline-item">
                                <i class="mdi mdi-comment-multiple-outline"></i>
                                @story.CommentsCount @Pluralizer["комментарий", story.CommentsCount]
                            </li>
                        </ul>
                    </div>
                    <div class=" card-body storyblog-story-header">
                        <h5 class="card-title storyblog-story-title">
                            <a href=@linkSrc>@story.Title</a>
                        </h5>
                        <div class="card-text mt-2">@story.Content</div>
                        <BootstrapButton Type=BootstrapButtonTypes.Primary Size=BootstrapButtonSizes.Small Outline=true Class="mt-4" OnClick=@(e => UriHelper.NavigateTo(linkSrc))>Читать полностью<i class="mdi mdi-arrow-right"></i></BootstrapButton>
                    </div>
                </article>
            }

            <div class="container mt-4">
                <div class="row justify-content-center">
                    <nav aria-label="pages">
                        <ul class="pagination">
                            <li class=@("page-item" + (null == State.Value.BackwardUri ? " disabled" : String.Empty))>
                                <a href="#" class="page-link" onclick=@(e => OnPaginationClick(new GetStoriesBackwardAction(State.Value.BackwardUri)))>Назад</a>
                            </li>

                            <li class=@("page-item" + (null == State.Value.ForwardUri ? " disabled" : String.Empty))>
                                <a href="#" class="page-link" onclick=@(e => OnPaginationClick(new GetStoriesForwardAction(State.Value.ForwardUri)))>Вперед</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </section>

        <aside class="col-4 storyblog-aside">
            <div class="card storyblog-widget">
                <div class="card-body">
                    <h4 class="card-title">About Blog</h4>
                    <p class="card-text">
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                        Pellentesque id tempus odio, quis tincidunt nisi.
                        In hac habitasse platea dictumst.
                        Cras rhoncus tincidunt egestas.
                        Vivamus rutrum maximus vulputate.
                        Praesent vestibulum justo vel cursus volutpat.
                        Phasellus vitae justo velit.
                    </p>
                </div>
            </div>
                
            <div class="card storyblog-widget">
                <div class="card-body">
                    <h4 class="card-title">Tags</h4>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Cras justo odio <span class="badge badge-pill badge-secondary">1</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Dapibus ac facilisis in <span class="badge badge-pill badge-secondary">3</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Vestibulum at eros <span class="badge badge-pill badge-secondary">9</span>
                        </li>
                    </ul>                
                </div>
            </div>
        </aside>
    }
</div>

@code
{
    protected override void OnInit()
    {
        base.OnInit();
        Dispatcher.Dispatch(new GetStoriesAction(StoryFlags.Authors | StoryFlags.Comments));
    }

    private void OnPaginationClick(IAction action)
    {
        Dispatcher.Dispatch(action);
    }

    private string OnConvertTimeSpan(TimeSpan span, DateTime dateTime)
    {
        if (span < TimeSpan.FromDays(1.0d))
        {
            return TimeSpanLocalizer[TimeSpan.FromHours(span.TotalHours)];
        }

        //System.Diagnostics.Debug.WriteLine($"{System.Globalization.CultureInfo.CurrentUICulture.DisplayName}");

        return DateTimeLocalizer[dateTime];
    }
}